/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-01-12 03:02:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
public String declaration(String startDec, String endDec){
	return startDec  +" "+ endDec;
 }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>JSP 기초</h1>\r\n");
      out.write("<pre>\r\n");
      out.write("JSP는 기존에 서버용 자바언어인 Servlet에서 \r\n");
      out.write("화면 구현에 관련된 소스 부분을 별도로 분리하는 기술을 말한다\r\n");
      out.write("</pre>\r\n");
      out.write("<h2>지시자 태그</h2>\r\n");
      out.write("<h3>");
      out.print(request.getAttribute("지시자태그"));
      out.write("</h3>\r\n");
      out.write("<pre>\r\n");
      out.write("지시자 태그란, 해당하는 페이지 전체에서 사용할 속성을 지정하는 JSP태그\r\n");
      out.write("\r\n");
      out.write("1. page : 해당 페이지에서 사용할 속성을 지정\r\n");
      out.write("\t1-1 : language : 사용할 프로그래밍 언어\r\n");
      out.write("\t1-2 : import : 페이지에서 필요한 자바의 클래스를 import 할 때 사용\r\n");
      out.write("2.include : 다른 위치의 html/jsp를 현재 페이지에 삽일할때 사용\r\n");
      out.write("2.taglib  : 다른 라이브러리에서 제공하는 커스텀태그를 사용할 때 사용 \r\n");
      out.write("</pre>\r\n");
      out.write("<h2>선언 태그</h2>\r\n");
      out.write("<h3>");
      out.print( request.getAttribute("선언태그"));
      out.write("</h3>\r\n");
      out.write("<pre>\r\n");
      out.write("선언태그는 메서드, 필드변수를 선언할 때 사용. 따라서 static 변수도 가능하다\r\n");
      out.write("클래스의 필드에 해당하기 때문에 함부로 사용하면 위험하다\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");
      out.write("<h2>스크립틀릿(Scriptlet)태그</h2>\r\n");
      out.write("<h3>\r\n");

String arg1 = "&lt;%";
String arg2 = "%&gt"; 
out.write(declaration(arg1,arg2));

      out.write("\r\n");
      out.write("\r\n");
      out.write("</h3>\r\n");
      out.write("<pre>\r\n");
      out.write("페이지 내부에서 Java의 소스코드를 작성하는 영역을 나타내는 태그\r\n");
      out.write("스크립틀릿에 작성하는 코드는 _jspService() 메서드 내부에 작성된다\r\n");
      out.write("따라서 메서드 선언이나, static 변후는 사용할 수 없다\r\n");
      out.write("</pre>\r\n");
      out.write("<h2>표현식 태그</h2>\r\n");
      out.write("<h3>");

String exArg1 = "&lt;%=";
String exArg2 = "%&gt"; 

      out.write('\r');
      out.write('\n');
      out.print( declaration(exArg1,exArg2));
      out.write("\r\n");
      out.write("</h3>\r\n");
      out.write("<pre>\r\n");
      out.write("표현식 태그란 특정 객체나, 변수의 값을 출력하는 용도로 사용\r\n");
      out.write("out.println() 메서드를 보다 편하게 사용할 수 있다\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
